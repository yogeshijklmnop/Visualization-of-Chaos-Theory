import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the Lorenz equation
def lorenz(x, y, z, s=10, r=28, b=2.667):
    x_dot = s * (y - x)
    y_dot = r * x - y - x * z
    z_dot = x * y - b * z
    return x_dot, y_dot, z_dot

# Define the initial conditions
x, y, z = (0, 1, 1.05)

# Set the time step and total time
dt = 0.01
tmax = 30
nsteps = int(tmax / dt)

# Create the figure and axes objects
fig = plt.figure(facecolor='black')
ax = fig.add_subplot(111, projection='3d')
ax.set_xlabel('X', color='white')
ax.set_ylabel('Y', color='white')
ax.set_zlabel('Z', color='white')
ax.set_title('Lorenz Attractor')
ax.set_facecolor('black')

# Set the grid color to white and make it thinner
ax.xaxis.pane.set_edgecolor('white')
ax.yaxis.pane.set_edgecolor('white')
ax.zaxis.pane.set_edgecolor('white')
ax.xaxis.pane.fill = False
ax.yaxis.pane.fill = False
ax.zaxis.pane.fill = False
ax.grid(True, linewidth=0.5, color='white')

# Set the tick color to white
ax.tick_params(axis='x', colors='white')
ax.tick_params(axis='y', colors='white')
ax.tick_params(axis='z', colors='white')

# Initialize the data arrays
xs = np.empty(nsteps)
ys = np.empty(nsteps)
zs = np.empty(nsteps)

# Set the first values
xs[0], ys[0], zs[0] = (x, y, z)

# Create the plot object and the line object for the trace
ln, = ax.plot([], [], [], color='lime', lw=1)
trace, = ax.plot([], [], [], color='gray', alpha=0.5, lw=0.2)

# Set the axis limits
ax.set_xlim(-25, 25)
ax.set_ylim(-35, 35)
ax.set_zlim(5, 55)

for i in range(1, nsteps):
    # Update the data
    x_dot, y_dot, z_dot = lorenz(xs[i-1], ys[i-1], zs[i-1])
    xs[i] = xs[i-1] + x_dot * dt
    ys[i] = ys[i-1] + y_dot * dt
    zs[i] = zs[i-1] + z_dot * dt

    

    


# Create the animation loop
for i in range(1, nsteps):
    
    # Update the plot
    ln.set_data(xs[:i], ys[:i])
    ln.set_3d_properties(zs[:i])
    trace.set_data(xs[:i], ys[:i])
    trace.set_3d_properties(zs[:i])
    fig.canvas.draw()

    # Wait for the next frame
    plt.pause(0.01)

# Show the plot
plt.show()